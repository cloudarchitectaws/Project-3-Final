version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            SUCCESS=`curl -H "token: c1b1e3ca-9ad3-4e51-a6ba-8693a7450b4e" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}`
            if [[ $SUCCESS == "Migration Successful" ]];
            then
              echo "REVERTING THE MIGRATIONS"
              cd backend
              npm install
              npm run migrations:revert
            else
              echo "NO REVERT REQUIRED"
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ./frontend
            echo "INSTALLING NPM MODULE DEPENDENCIES"
            npm i
            echo "BUILDING THE FRONTEND APPLICATION"
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd ./backend
            echo "INSTALLING NPM MODULE DEPENDENCIES"
            npm i
            echo "BUILDING THE BACKEND APPLICATION"
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd ./frontend

            echo "INSTALLING DEPENDENCIES"
            sudo npm install oauth-sign

            echo "RUNNING TEST SUITE"
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd ./backend

            echo "RUNNING TEST SUITE"
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
   
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyse front-end
          command: |
            cd ./frontend

            echo "INSTALL NODE_MODULE DEPENDENCIES"
            npm i

            echo "RUNNING FRONTEND SECURITY VULNERABILITY SCAN"
            npm audit fix --audit-level=critical --force
            
      
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
  
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyse front-end
          command: |
            cd ./frontend

            echo "INSTALL NODE_MODULE DEPENDENCIES"
            npm i

            echo "RUNNING FRONTEND SECURITY VULNERABILITY SCAN"
            npm audit fix --audit-level=critical --force
          
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: CDN stack
          command: |
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name production-distro --region ap-south-1 --parameter-overrides WorkflowID=jkhkdajshkljbl --tags project=udapeople &
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar gzip curl
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend_${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Store Backend URL in Memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "BACKEND IP:"
            echo ${BACKEND_IP}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
               --request PUT \
               --data ${BACKEND_IP} https://api.memstash.io/values/backendip
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend_${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            
            echo "RETRIEVING THE IP ADDRESS OF THE BACKEND EC2 INSTANCE"
            workflowidip=$(echo "aws ec2 describe-instances --filters 'Name=tag:project,Values=udapeople-backend_${CIRCLE_WORKFLOW_ID:0:7}' \
              --query 'Reservations[*].Instances[*].PublicIpAddress' --output text")
            echo $workflowidip > backendip.sh; chmod 755 backendip.sh
            echo "POPULATING ANSIBLE INVENTORY FOR FUTURE SERVER CONFIGURATIONS STEPS"
            ./backendip.sh >> .circleci/ansible/inventory.txt
            backendip=$(./backendip.sh)
            echo "STORING THE IP ADDRESS OF THE BACKEND EC2 INSTANCE IN MEMSTASH FOR LATER USE"
            curl -H "Content-Type: text/plain" -H "token: 50ff33d6-1f33-4917-9dff-ca0f975d83db" --request PUT --data "$backendip" \
              https://api.memstash.io/values/backendip_${CIRCLE_WORKFLOW_ID:0:7}
            
            echo "RETRIEVING THE PUBLIC DNS NAME OF THE BACKEND EC2 INSTANCE"
            workflowiddns=$(echo "aws ec2 describe-instances --filters 'Name=tag:project,Values="udapeople-backend_${CIRCLE_WORKFLOW_ID:0:7}"' \
              --query 'Reservations[*].Instances[*].PublicDnsName' --output text")
            echo $workflowiddns > backenddns.sh; chmod 755 backenddns.sh
            backenddnsurl=$(./backenddns.sh)
            echo "STORING THE PUBLIC DNS NAME OF THE BACKEND EC2 INSTANCE IN MEMSTASH FOR LATER USE"
            curl -H "Content-Type: text/plain" -H "token: 50ff33d6-1f33-4917-9dff-ca0f975d83db" --request PUT --data "$backenddnsurl" \
              https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 11:f8:00:99:22:99:cb:d0:94:80:a0:1a:1f:55:17:19
      - attach_workspace:
          at: /tmp      
      - run:
          name: Install dependencies
          command: |
            
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/ansible/inventory.txt  .circleci/ansible/configure-server.yml
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            echo "BUILDING THE BACKEND ENVIRONMENT FILE FOR POSTGRES MIGRATIONS"
            echo ENVIROMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env

            echo "INSTALLING NPM MODULE DEPENDENCIES"
            npm i > npminstall.log

            echo "INSTALLING OATH-SIGN PACKAGE"
            npm install oauth-sign >> npminstall.log

            echo "RUNNING POSTGRES DATABASE MIGRATIONS"
            npm run migrations > migration.log
      - run:
          name: Send migration results to memstash
          command: |
            if [[ $(grep -i "has been executed successfully" migration.log | wc -l) -ge 1 ]]; then
                echo "has been executed successfully EXECUTED THE DATABASE MIGRATIONS"
                curl -H "Content-Type: text/plain" -H "token: 50ff33d6-1f33-4917-9dff-ca0f975d83db" --request PUT \
                  --data "Migration successful" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              else
                echo "FAILED TO RUN THE DATABASE MIGRATIONS"
                curl -H "Content-Type: text/plain" -H "token: 50ff33d6-1f33-4917-9dff-ca0f975d83db" --request PUT \
                  --data "Migration failed" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              fi
              echo "STORING THE RESULTS OF THE DATABASE MIGRATIONS IN MEMSTASH FOR LATER EVALUATION"
      - destroy-environment
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
         

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]